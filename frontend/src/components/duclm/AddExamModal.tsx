"use client";

import React, { useState } from "react";
import {
    Dialog,
    DialogContent,
    DialogFooter,
    DialogTitle,
    DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { API } from "@/helper/axios";
import { useToast } from "@/components/ui/use-toast";

interface AddExamModalProps {
    isOpen: boolean;
    onClose: () => void;
    refreshList: () => void;
}

const AddExamModal: React.FC<AddExamModalProps> = ({ isOpen, onClose, refreshList }) => {
    const { toast } = useToast();
    const [examName, setExamName] = useState<string>("");
    const [examStart, setExamStart] = useState<string>("");
    const [examEnd, setExamEnd] = useState<string>("");
    const [grade, setGrade] = useState<string>("");
    const [status, setStatus] = useState<string>("on");
    const [file, setFile] = useState<File | null>(null);
    const [audioFile, setAudioFile] = useState<File | null>(null); // Th√™m tr·∫°ng th√°i cho t·ªáp √¢m thanh

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        if (event.target.files && event.target.files.length > 0) {
            setFile(event.target.files[0]);
        }
    };

    const handleAudioFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        if (event.target.files && event.target.files.length > 0) {
            setAudioFile(event.target.files[0]);
        }
    };

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        
        try {
            if (!file) {
                toast({ title: "Vui l√≤ng ch·ªçn t·ªáp Excel!", className: "text-white bg-red-500" });
                return;
            }
            const formData = new FormData();
            formData.append("examName", examName);
            formData.append("examStart", examStart);
            formData.append("examEnd", examEnd);
            formData.append("grade", grade);
            formData.append("status", status);
            formData.append("file", file);
            if (audioFile) formData.append("audioZip", audioFile); // Th√™m t·ªáp √¢m thanh v√†o formData

            const response = await API.post("/exam/upload-exam", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });

            if (response.status === 200) {
                toast({
                    title: "Th√†nh c√¥ng!",
                    description: "ƒê√£ th√™m k·ª≥ thi m·ªõi.",
                    className: "text-white bg-green-500",
                });

                refreshList();
                onClose();
            }
        } catch (error) {
            toast({
                title: "L·ªói!",
                description: "Kh√¥ng th·ªÉ th√™m k·ª≥ thi.",
                className: "text-white bg-red-500",
            });
        }
    };

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="bg-white shadow-lg rounded-lg">
                <DialogTitle>Th√™m k·ª≥ thi</DialogTitle>
                <form onSubmit={handleSubmit} className="p-4 space-y-4">
                <div>
                        <label className="block text-gray-700 font-medium mb-1">T√™n k·ª≥ thi</label>
                        <select
                            value={examName}
                            onChange={(e) => setExamName(e.target.value)}
                            className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500"
                            required
                        >
                            <option value="" disabled>Ch·ªçn t√™n k·ª≥ thi</option> {/* Option m·∫∑c ƒë·ªãnh kh√¥ng th·ªÉ ch·ªçn */}
                            <option value="C·∫•p Ph∆∞·ªùng/X√£">C·∫•p Ph∆∞·ªùng/X√£</option>
                            <option value="C·∫•p Qu·∫≠n/Huy·ªán">C·∫•p Qu·∫≠n/Huy·ªán</option>
                            <option value="C·∫•p T·ªânh/Th√†nh ph·ªë">C·∫•p T·ªânh/Th√†nh ph·ªë</option>
                        </select>
                    </div>
                    <div>
                        <label className="block mb-1">Ng√†y b·∫Øt ƒë·∫ßu</label>
                        <input type="datetime-local" value={examStart} onChange={(e) => setExamStart(e.target.value)}
                            className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500" required />
                    </div>
                    <div>
                        <label className="block mb-1">Ng√†y k·∫øt th√∫c</label>
                        <input type="datetime-local" value={examEnd} onChange={(e) => setExamEnd(e.target.value)}
                            className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500" required />
                    </div>
                    <div className="mb-4">
                        <label className="block mb-1">Kh·ªëi</label>
                        <select
                            value={grade}
                            onChange={(e) => setGrade(e.target.value)} // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã sang ki·ªÉu number
                            className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500"
                            required
                        >
                            <option value="" disabled>Ch·ªçn kh·ªëi</option> {/* Option m·∫∑c ƒë·ªãnh kh√¥ng th·ªÉ ch·ªçn */}
                            {[...Array(7)].map((_, index) => {
                                const gradeValue = index + 3; // T·∫°o c√°c gi√° tr·ªã t·ª´ 3 ƒë·∫øn 9
                                return (
                                    <option key={gradeValue} value={gradeValue}>
                                        {gradeValue}
                                    </option>
                                );
                            })}
                        </select>
                    </div>
                    {/* Status */}
                    <div className="mb-4">
                        <label className="block mb-1">Tr·∫°ng th√°i</label>
                        <select
                            value={status}
                            onChange={(e) => setStatus(e.target.value)}
                            className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500"
                        >
                            <option value="on">B·∫≠t</option>
                            <option value="off">T·∫Øt</option>
                        </select>
                    </div>
                    <div>
                        <label className="block mb-1">T·∫£i l√™n file</label>
                        <input type="file" onChange={handleFileChange} className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500" />
                        {file && (
                            <p className="text-sm text-green-600 mt-1">
                                üìÑ ƒê√£ ch·ªçn: {file.name}
                            </p>
                        )}
                    </div>
                    <div>
                        <label className="block mb-1">T·∫£i l√™n file √¢m thanh (RAR/ZIP)</label>
                        <input type="file" onChange={handleAudioFileChange} className="w-full p-2 border border-gray-300 rounded-md focus:outline-orange-500" accept=".zip,.rar" />
                        {audioFile && (
                            <p className="text-sm text-green-600 mt-1">
                                üéµ ƒê√£ ch·ªçn: {audioFile.name}
                            </p>
                        )}
                    </div>
                    
                    <DialogFooter>
                        <Button type="submit" className="bg-orange-500 hover:bg-orange-600 text-white rounded-md px-4 py-2">
                            Th√™m k·ª≥ thi
                        </Button>
                        <DialogClose asChild>
                            <Button type="button" onClick={onClose} className="border text-black rounded-md px-4 py-2 hover:bg-gray-100">
                                ƒê√≥ng
                            </Button>
                        </DialogClose>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
};

export default AddExamModal;